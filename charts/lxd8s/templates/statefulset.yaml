apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "lxd8s.fullname" . }}
  labels:
    {{- include "lxd8s.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "lxd8s.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "lxd8s.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "lxd8s.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lxd8s.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            capabilities:
              add: [NET_ADMIN]
          image: '{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: FIRECRACKER_GO_SDK_REQUEST_TIMEOUT_MILLISECONDS
              value: {{ .Values.firectlTimeout | quote }}

            - name: LXD_DATA
            {{- if .Values.pvc.lxd.imgOnFilesystem }}
              value: /mnt/lxd/disk.img
            {{- else }}
              value: /dev/lxd
            {{- end }}
            - name: LXD_STORAGE
            {{- if .Values.pvc.storage.imgOnFilesystem }}
              value: /mnt/storage/disk.img
            {{- else }}
              value: /dev/storage
            {{- end }}
            - name: CPUS
              value: {{ .Values.vm.cpus | quote }}
            - name: MEM
              value: {{ .Values.vm.memory | quote }}

            - name: INET_HOST
              value: {{ .Values.nat.host | quote }}
            - name: INET_VM
              value: {{ .Values.nat.vm | quote }}
            - name: LXD_NET
              value: {{ .Values.network | quote }}

            - name: KUBELAN
              value: 'yes'
            - name: CERT_SECRET_BASE
              value: '{{ include "lxd8s.fullname" . }}-cert-'

            - name: OOM_INTERVAL
              value: {{ .Values.oomInterval | squote }}
            - name: OOM_MIN_FREE
              value: {{ .Values.oomMinFree | squote }}
          ports:
            - name: liveness
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          startupProbe:
            httpGet:
              path: /liveness
              port: liveness
            {{- toYaml .Values.startupProbe | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /liveness
              port: liveness
            {{- toYaml .Values.livenessProbe | nindent 12 }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeDevices:
          {{- range $name, $vals := .Values.pvc }}
            {{- if not $vals.imgOnFilesystem }}
            - name: {{ $name }}
              devicePath: /dev/{{ $name }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: preseed
              mountPath: /run/config
          {{- range $name, $vals := .Values.pvc }}
            {{- if $vals.imgOnFilesystem }}
            - name: {{ $name }}
              mountPath: /mnt/{{ $name }}
            {{- end }}
          {{- end }}
          stdin: true
          tty: true
        - name: kubelan
          image: '{{ .Values.global.kubelan.image.repository }}:{{ .Values.global.kubelan.image.tag }}'
          imagePullPolicy: {{ .Values.global.kubelan.image.pullPolicy }}
          env:
            - name: KL_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KL_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 8181
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 5
          securityContext:
            capabilities:
              add: [NET_ADMIN]
          volumeMounts:
            - name: kubelan-config
              mountPath: /run/config
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
        - name: preseed
          configMap:
            name: {{ include "lxd8s.fullname" . }}-preseed
        - name: kubelan-config
          configMap:
          {{- if .Values.global.kubelan.externalConfigMap }}
            name: {{ .Values.global.kubelan.externalConfigMap }}
          {{- else }}
            name: {{ include "lxd8s.fullname" . }}-kubelan
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    {{- $dot := . }}
    {{- range $name, $vals := .Values.pvc }}
    - metadata:
        name: {{ $name }}
      spec:
      {{- if $dot.storageClass }}
        storageClassName: {{ $dot.storageClass }}
      {{- end }}
        accessModes: [ReadWriteOnce]
      {{- if $vals.imgOnFilesystem }}
        volumeMode: Filesystem
      {{- else }}
        volumeMode: Block
      {{- end }}
        resources:
          requests:
            storage: {{ $vals.size | quote }}
    {{- end }}
